<html DOCTYPE! xmlns:class="http://www.w3.org/1999/xhtml">
<head>
  <title>Adapto</title>
  <%= csrf_meta_tags %>
  <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
         showProcessingMessages: false,
         tex2jax: { inlineMath: [['$','$'],['\\(','\\)']] }
        });
    </script>

  <script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_HTMLorMML">
  </script>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
  <link href="https://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet" type="text/css">
  <link href="https://fonts.googleapis.com/css?family=Lato:400,700,400italic,700italic" rel="stylesheet" type="text/css">
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
  <%= javascript_include_tag 'application'%>
  <%= javascript_include_tag 'bjqs-1.3.js'%>
  <%= javascript_include_tag 'bjqs-1.3.min'%>

  <script>
    $(document).ready(function(){
      $('body').fadeIn(1000);
    });


  </script>

  <style>
    select{
      font-size:20px;
    }
      p{
        font-size: 10pt;
      }
  </style>
  <script>
    var Preview = {
      delay: 150,        // delay after keystroke before updating

      preview: null,     // filled in by Init below
      buffer: null,      // filled in by Init below

      timeout: null,     // store setTimout id
      mjRunning: false,  // true when MathJax is processing
      mjPending: false,  // true when a typeset has been queued
      oldText: null,     // used to check if an update is needed

      //
      //  Get the preview and buffer DIV's
      //
      Init: function () {
        this.preview = document.getElementById("MathPreview");
        this.buffer = document.getElementById("MathBuffer");
      },

      //
      //  Switch the buffer and preview, and display the right one.
      //  (We use visibility:hidden rather than display:none since
      //  the results of running MathJax are more accurate that way.)
      //
      SwapBuffers: function () {
        var buffer = this.preview, preview = this.buffer;
        this.buffer = buffer; this.preview = preview;
        buffer.style.visibility = "hidden"; buffer.style.position = "absolute";
        preview.style.position = ""; preview.style.visibility = "";
      },

      //
      //  This gets called when a key is pressed in the textarea.
      //  We check if there is already a pending update and clear it if so.
      //  Then set up an update to occur after a small delay (so if more keys
      //    are pressed, the update won't occur until after there has been
      //    a pause in the typing).
      //  The callback function is set up below, after the Preview object is set up.
      //
      Update: function () {
        if (this.timeout) {clearTimeout(this.timeout)}
        this.timeout = setTimeout(this.callback,this.delay);
      },

      //
      //  Creates the preview and runs MathJax on it.
      //  If MathJax is already trying to render the code, return
      //  If the text hasn't changed, return
      //  Otherwise, indicate that MathJax is running, and start the
      //    typesetting.  After it is done, call PreviewDone.
      //
      CreatePreview: function () {
        Preview.timeout = null;
        if (this.mjPending) return;
        var text = document.getElementById("MathInput").value;
        if (text === this.oldtext) return;
        if (this.mjRunning) {
          this.mjPending = true;
          MathJax.Hub.Queue(["CreatePreview",this]);
        } else {
          this.buffer.innerHTML = this.oldtext = text;
          this.mjRunning = true;
          MathJax.Hub.Queue(
              ["Typeset",MathJax.Hub,this.buffer],
              ["PreviewDone",this]
          );
        }
      },

      //
      //  Indicate that MathJax is no longer running,
      //  and swap the buffers to show the results.
      //
      PreviewDone: function () {
        this.mjRunning = this.mjPending = false;
        this.SwapBuffers();
      }

    };

    //
    //  Cache a callback to the CreatePreview action
    //
    Preview.callback = MathJax.Callback(["CreatePreview",Preview]);
    Preview.callback.autoReset = true;  // make sure it can run more than once

  </script>
  <script type="text/x-mathjax-config">
MathJax.Hub.Config({
  tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
</script>
<script>

  function clear() {
      document.getElementById('question').value = "";
      document.getElementById('solution').value = "";
      document.getElementById('right').value = "";
      document.getElementById('wrong1').value = "";
      document.getElementById('wrong2').value = "";
      document.getElementById('wrong3').value = "";
    document.getElementById('difficulty').value = "";
    document.getElementById('topic').value = "";
  }

  function update() {
  if ( $.trim( $('#question').val() ) == '' ){
    document.getElementById('question').value = document.getElementById('MathInput').value;
    document.getElementById('MathInput').value = "";
    }
  else if ( $.trim( $('#solution').val() ) == '' ){
    document.getElementById('solution').value = document.getElementById('MathInput').value;
    document.getElementById('MathInput').value = "";
    }
  else if ( $.trim( $('#right').val() ) == '' ){
    document.getElementById('right').value = document.getElementById('MathInput').value;
    document.getElementById('MathInput').value = "";
  }
  else if ( $.trim( $('#wrong1').val() ) == '' ){
    document.getElementById('wrong1').value = document.getElementById('MathInput').value;
    document.getElementById('MathInput').value = "";
  }
  else if ( $.trim( $('#wrong2').val() ) == '' ){
    document.getElementById('wrong2').value = document.getElementById('MathInput').value;
    document.getElementById('MathInput').value = "";
  }
  else if ( $.trim( $('#wrong3').val() ) == '' ){
    document.getElementById('wrong3').value = document.getElementById('MathInput').value;
    document.getElementById('MathInput').value = "";
  }
  else {
    document.getElementById('MathInput').value = ""
  }
  }


</script>
  <script>
    function post_details() {
      var url = "http://localhost:3000/interface/show";
      var question = document.getElementById('question').value
      var solution = document.getElementById('solution').value
      var coption = document.getElementById('right').value
      var woption1 = document.getElementById('wrong1').value
      var woption2 = document.getElementById('wrong2').value
      var woption3 = document.getElementById('wrong3').value
      var topic = document.getElementById('topic').value
      var difficulty = document.getElementById('difficulty').value
      if (topic != "" && difficulty != "" && woption3 != "" && woption2 != "" && woption1 != "" && coption != "" && question != "" && solution != "" ) {
        var params = "question=" + question + "&solution=" + solution + "&coption=" + coption + "&woption1=" + woption1 + "&woption2=" + woption2 + "&woption3=" + woption3 + "&topic=" + topic + "&difficulty=" + difficulty;
        var xhr = new XMLHttpRequest();
        xhr.open("POST", url, true);
        //Send the proper header information along with the request
        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        this.clear();
        xhr.send(params);

      } else {
        alert("Something is missing");
      }

    }
  </script>
</head>
<body style="background: none;">
<h1 style="padding-left: 50px;"><%= @success%></h1>
<div class="col-lg-12">
  <div class="col-lg-5" style="border-right: 2px solid red;height:88%;">
    <p>Preview is shown here:</p>
    <div id="MathPreview" style="border:1px solid; padding: 3px; width:100%; margin-top:5px"></div>
    <div id="MathBuffer" style="border:1px solid; padding: 3px; width:100%; margin-top:5px;
        visibility:hidden; position:absolute; top:0; left: 0"></div>
    <br>
    <p> Type text (mixed with MathML, TeX or asciimath) in the box below for a live preview.</p>

  <textarea id="MathInput" cols="55" rows="10" onkeyup="Preview.Update()" style="margin-top:5px" onkeydown = "if (event.keyCode == 9)
      document.getElementById('butt').click()" >
  </textarea>
 <br>
    <div  style="width: 20px;text-align: center;"><button id="butt" onclick="update();">Confirm</button></div>
    </div>



  <div class="col-lg-5" style="border-right: 2px solid red;" >
    <br>
    <h7>Question</h7>
    <textarea id="question" cols="55" rows="4"  style="margin-top:5px"></textarea>
    <h7>Solution</h7>
    <textarea id="solution" cols="55" rows="4"  style="margin-top:5px"></textarea>
    <h7>Right Option</h7>
    <textarea id="right" cols="55" rows="1"  style="margin-top:5px"></textarea>
    <h7>W Option 1</h7>
    <textarea id="wrong1" cols="55" rows="1"  style="margin-top:5px"></textarea>
    <h7>W Option 2</h7>
    <textarea id="wrong2" cols="55" rows="1"  style="margin-top:5px"></textarea>
    <h7>W Option 3</h7>
    <textarea id="wrong3" cols="55" rows="1"  style="margin-top:5px"></textarea>
    <br>
    <select id="topic">
      <%@topics.each do |topic|%>
          <option><%=topic%></option>
      <%end%>
    </select >
    <select id="difficulty">
      <%@difficulty.each do |diff|%>
          <option><%=diff%></option>
      <%end%>
    </select>
    <div style="text-align: center;">
      <button onclick="post_details();">SUBMIT</button>
    </div></div>

  <div class="col-lg-2">
    <h3 style="text-align: center;">HELPER!</h3>
    <p style="color:red;">x = -b +- sqrt(b^2 -4ac)/2a</p>
    <p>`x = -b +- sqrt(b^2 -4ac)/2a`</p>
    <br>
    <p style="color:red;">sum_(i=1)^n i^3=((n(n+1))/2)^2</p>
    <p>`sum_(i=1)^n i^3=((n(n+1))/2)^2`</p>
    <br>
    <p style="color:red;">pi</p>
    <p>`pi`</p>
    <br>
    <p style="color:red;">lambda</p>
    <p>`lambda`</p>
    <br>
    <p style="color:red;">delta</p>
    <p>`delta`</p>
  </div>

</div>



<script>
  Preview.Init();
</script>

</body>
</html>